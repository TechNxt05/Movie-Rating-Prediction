# -*- coding: utf-8 -*-
"""Movie Rating Prediction

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1wPEB0htygsJTrzR9HO5tUYkiof2slDyI
"""

import pandas as pd

import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn import metrics
from keras import models
from keras import layers
from keras.layers import Dense,Dropout
from keras import Sequential
from tensorflow.keras.optimizers import Adam
from sklearn import preprocessing
import tensorflow as tf

df = pd.read_csv('/content/drive/MyDrive/IMDb Movies India.csv', encoding='ISO-8859-1')

df.head()

df.shape

# Year with Best Average Rating
best_year = df.groupby('Year')['Rating'].mean().idxmax()
print(f'Year with Best Average Rating: {best_year}')

df.isnull().sum()

df.dropna(inplace=True)

df.drop_duplicates(inplace=True)

df.info()

# Convert into the correct data types
df['Year'] = df['Year'].str.replace(r'\(|\)', '', regex=True).astype(int)
df['Duration'] = pd.to_numeric(df['Duration'].str.replace(' min', ''))
df['Votes'] = pd.to_numeric(df['Votes'].str.replace(',', ''))

df.dtypes

df.describe(include='all')

plt.style.use('seaborn-v0_8-white')
df[['Year', 'Duration','Rating']].hist(bins=25, edgecolor='black',figsize=(12, 6))
plt.suptitle('Histograms of Year, Duration & Ratings ')
plt.show()

top_10_directors = df['Director'].value_counts(ascending=False).head(10)
plt.figure(figsize=(10, 5))
sns.barplot(x=top_10_directors.values, y=top_10_directors.index,  palette='Dark2')
plt.title('Top 10 Directors with Most Movie Involvements')
plt.xlabel('Number of Movies')
plt.ylabel('Director')
plt.show()

# Top 10 Actors With Most Movie Involvements
# Combine the three actor columns into one Series
combined_actors = pd.concat([df['Actor 1'], df['Actor 2'], df['Actor 3']])

# Display the top 10 actors
top_10_actors = combined_actors.value_counts().head(10)
top_10_actors

plt.figure(figsize=(10, 5))
sns.barplot(x=top_10_actors.values, y=top_10_actors.index, palette='Dark2')
plt.title('Top 10 Actors with Most Movie Involvements')
plt.xlabel('Number of Movies')
plt.ylabel('Actor')
plt.show()

# Average Rating over these years

# Calculate the average rating for each year
average_rating_per_year = df.groupby('Year')['Rating'].mean().reset_index()
average_rating_per_year.columns = ['Year', 'Average Rating']

#Plot
plt.figure(figsize=(8, 4))
plt.plot(average_rating_per_year['Year'], average_rating_per_year['Average Rating'], linestyle='-')
plt.xlabel('Year')
plt.ylabel('Average Rating')
plt.title('Average Movie Rating Over the Years')
plt.grid(False)
plt.show()

# High rated movie details
high_rating_movies = df[df['Rating'] > 8.5]
high_rating_movies

# Group by Rating and get the count of movies which have higher than rating value 8.5
rating_counts = high_rating_movies.groupby('Rating')['Name'].count().reset_index()
rating_counts.columns = ['Rating', 'Number of Movies']
rating_counts = rating_counts.sort_values(by='Rating', ascending=False)
rating_counts

#Relationship between numeric variables
new_df=  df.drop(columns=['Name','Actor 1','Actor 2','Actor 3','Director','Genre'])
corr=new_df.corr()
plt.figure(figsize=(10,5))

sns.heatmap(corr, annot=True, fmt=".2f", linewidth=0.5)

sns.pairplot(new_df,diag_kind='auto')
plt.suptitle(' Pair Plot of features against Rating', y=1.02)
plt.show()

df= df.drop('Name',axis=1)

# Create new features

Genre_Average_Rating = df.groupby('Genre')['Rating'].transform('mean')
df['Genre_Average_Rating'] =Genre_Average_Rating

Director_Average_Rating = df.groupby('Director')['Rating'].transform('mean')
df['Director_Average_Rating'] =Director_Average_Rating

Actor1_Average_Rating = df.groupby('Actor 1')['Rating'].transform('mean')
df['Actor1_Average_Rating'] =Actor1_Average_Rating

Actor2_Average_Rating = df.groupby('Actor 2')['Rating'].transform('mean')
df['Actor2_Average_Rating'] =Actor2_Average_Rating

Actor3_Average_Rating = df.groupby('Actor 3')['Rating'].transform('mean')
df['Actor3_Average_Rating'] =Actor3_Average_Rating

df

# Define feature and target variables
x= df[['Year','Votes','Duration','Genre_Average_Rating','Director_Average_Rating','Actor1_Average_Rating','Actor2_Average_Rating','Actor3_Average_Rating']]
y=df['Rating']

x_train,x_test,y_train,y_test = train_test_split(x,y, test_size=0.2, random_state= 1 )

train_data= x_train.join(y_train)
train_data

best_year = df.groupby('Year')['Rating'].mean().idxmax()
print(f'Year with Best Average Rating: {best_year}')

plt.figure(figsize=(8, 6))
sns.scatterplot(x='Duration', y='Rating', data=df)
plt.title('Impact of Movie Duration on Rating')
plt.xlabel('Duration (minutes)')
plt.ylabel('Rating')
plt.show()

correlation = df['Duration'].corr(df['Rating'])
print(f"Correlation between Duration and Rating: {correlation}")

# Calculate director success rate (e.g., average rating of movies by a director)
director_success = df.groupby('Director')['Rating'].mean().reset_index()
director_success.columns = ['Director', 'DirectorSuccessRate']

# Merge the success rate back into the main DataFrame
df = df.merge(director_success, on='Director', how='left')

# Assuming 'Name' has been dropped, use a unique identifier like 'ID' or index
def find_similar_movies(movie_id, top_n=10):  # Changed to movie_id
    # Get the genres and actors of the target movie
    target_movie = df[df.index == movie_id]  # Changed to use index
    target_genres = target_movie['Genre'].values[0].split(', ')
    target_actors = list(target_movie[['Actor 1', 'Actor 2', 'Actor 3']].values[0])

    # ... (Rest of the function remains the same)

# Assuming 'ID' is a unique identifier column
similar_movies_example = find_similar_movies(1234)  # Using movie ID 1234

# Or, if using the index:
similar_movies_example = find_similar_movies(df.index[0])  # Using the first movie in the DataFrame

director_counts = df['Director'].value_counts()
most_frequent_director = director_counts.index[0]
print(f"Director with Most Movies: {most_frequent_director} ({director_counts[0]} movies)")

# Combine the three actor columns into one Series
all_actors = pd.concat([df['Actor 1'], df['Actor 2'], df['Actor 3']])

# Count the occurrences of each actor
actor_counts = all_actors.value_counts()

# Get the most frequent actors
most_frequent_actors = actor_counts.head(10)  # Top 10
print("Most Frequent Actors:")
print(most_frequent_actors)

actor_avg_rating = df.groupby('Actor 1')['Rating'].mean().sort_values(ascending=False)
print("Actor Popularity (Based on Average Movie Rating):")
print(actor_avg_rating.head(10))

from sklearn.tree import DecisionTreeRegressor

fitted_model_dt = DecisionTreeRegressor()
fitted_model_dt.fit(x_train, y_train)
y_pred_dt = fitted_model_dt.predict(x_test)

from sklearn.svm import SVR

fitted_model_svr = SVR()
fitted_model_svr.fit(x_train, y_train)
y_pred_svr = fitted_model_svr.predict(x_test)

from sklearn.ensemble import GradientBoostingRegressor

fitted_model_gb = GradientBoostingRegressor()
fitted_model_gb.fit(x_train, y_train)
y_pred_gb = fitted_model_gb.predict(x_test)

# Evaluating the model's performance
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score

MSE_dt =  mean_squared_error(y_test, y_pred_dt)
MAE_dt = mean_absolute_error(y_test, y_pred_dt)
R2_Score_dt = r2_score(y_test, y_pred_dt)

print('   Performance Evaluation for DecisionTreeRegressor Model: ')
print('Mean squared error value is: ', MSE_dt)
print('Mean absolute error value is: ', MAE_dt)
print('R2 score value is: ', R2_Score_dt)

MSE_svr =  mean_squared_error(y_test, y_pred_svr)
MAE_svr = mean_absolute_error(y_test, y_pred_svr)
R2_Score_svr = r2_score(y_test, y_pred_svr)

print('\n   Performance Evaluation for SVR Model: ')
print('Mean squared error value is: ', MSE_svr)
print('Mean absolute error value is: ', MAE_svr)
print('R2 score value is: ', R2_Score_svr)

MSE_gb =  mean_squared_error(y_test, y_pred_gb)
MAE_gb = mean_absolute_error(y_test, y_pred_gb)
R2_Score_gb = r2_score(y_test, y_pred_gb)

print('\n   Performance Evaluation for GB Model: ')
print('Mean squared error value is: ', MSE_gb)
print('Mean absolute error value is: ', MAE_gb)
print('R2 score value is: ', R2_Score_gb)

# Scatter plot for Decision Tree Regression model predictions
plt.figure(figsize=(10, 5))
plt.scatter(y_test, y_pred_dt, alpha=0.5)
plt.title('Decision Tree Regression Model: Actual vs Predicted Ratings')
plt.xlabel('Actual Ratings')
plt.ylabel('Predicted Ratings')
plt.show()

# Scatter plot for SVR model predictions
plt.figure(figsize=(10, 5))
plt.scatter(y_test, y_pred_svr, alpha=0.5)
plt.title('SVR Model: Actual vs Predicted Ratings')
plt.xlabel('Actual Ratings')
plt.ylabel('Predicted Ratings')
plt.show()

# Scatter plot for Gradient Boost Regression model predictions
plt.figure(figsize=(10, 5))
plt.scatter(y_test, y_pred_gb, alpha=0.5)
plt.title('Gradient Boost Regression Model: Actual vs Predicted Ratings')
plt.xlabel('Actual Ratings')
plt.ylabel('Predicted Ratings')
plt.show()

data = {'Year': [2017], 'Votes': [50] ,'Duration': [130], 'Genre_Average_Rating':[7.0],'Director_Average_Rating':[7.7],'Actor1_Average_Rating':[8.5],'Actor2_Average_Rating':[4.8],'Actor3_Average_Rating':[9.3]}
trail_data = pd.DataFrame(data)

# Prediction on trial data
predict_rating = fitted_model_gb.predict(trail_data)
print('Predicted Rating for trial data: ',predict_rating[0])